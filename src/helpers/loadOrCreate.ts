import { Address, BigInt, ethereum, log } from "@graphprotocol/graph-ts";
import { Transaction, User } from "../../generated/schema";

export function createTransaction(event: ethereum.Event, type: string, appAddress: Address): Transaction {
  let user = loadOrCreateUser(event.transaction.from, event);
  user.save();

  let transaction = new Transaction("auto"); // autogenerated
  transaction.timestamp = event.block.timestamp.toI64();
  transaction.type = type;
  transaction.userId = user.id;
  transaction.appId = appAddress.toHex();
  transaction.gasUsed = event.receipt ? event.receipt!.gasUsed : BigInt.fromI32(0);
  transaction.createdAt = event.block.timestamp;
  transaction.createdAtBlock = event.block.number;

  return transaction;
}

export function loadOrCreateUser(userAddress: Address, event: ethereum.Event): User {
  let user = loadUser(userAddress);
  if (!user) {
    user = createUser(userAddress, event);
  }
  return user as User;
}

export function createUser(userAddress: Address, event: ethereum.Event): User {
  const id = userAddress.toHex();
  let user = new User(id);
  user.createdAt = event.block.timestamp;
  user.createdAtBlock = event.block.number;

  return user as User;
}

export function loadUser(userAddress: Address): User | null{
  const id = userAddress.toHex();
  let user = User.load(id);

  return user;
}
